---
- name: Ensure all MYSQL dirs exists and has OK rights
  file: 
    path: "{{ item.paths }}"
    state: directory
    owner: mysql
    group: mysql
    mode: "{{ item.modes }}"
  with_items:
    - { paths: '{{ mysql_mysqld_tmpdir }}',  modes: '1777' }
    - { paths: '{{ mysql_mysqld_datadir }}', modes: '0700' }
    - { paths: '{{ mysql_logdir }}',         modes: '0755' }
    - { paths: '{{ mysql_replogdir }}',      modes: '0755' }

- stat: path="{{ mysql_mysqld_datadir }}/.stonecopy"
  register: stone

- stat: path="{{ mysql_std_datadir }}"
  register: sdata

- name: Copy data from /var/lib/mysql to {{ mysql_mysqld_datadir }} if they differ
  shell: cp -par /var/lib/mysql/* {{ mysql_mysqld_datadir }}/
  when: mysql_mysqld_datadir != mysql_std_datadir and sdata.stat.exists == True and stone.stat.exists == False
  register: copy_shell

- debug: { var: copy_shell.stdout }

- name: Rename {{ mysql_std_datadir }} and {{ mysql_std_logdir }} to old
  command: mv "{{ item.path }}" "{{ item.rename }}"
  with_items:
    - { path: "{{ mysql_std_datadir }}", rename: /var/lib/old_mysql_dir }
    - { path: "{{ mysql_std_logdir }}", rename: /var/log/old_mysql_log }
  when: sdata.stat.exists == True and stone.stat.exists == False

- name: Touch a .stone file to prevent multiple copy
  file:
    path: "{{ mysql_mysqld_datadir }}/.stonecopy"
    state: touch 
  when: stone.stat.exists == False

- name: Reconfigure Apparmor to use new {{ mysql_mysqld_datadir }} and {{ mysql_logdir }} if they differ from standard
  shell: sed -i {{ item }} -e 's#/var/lib/mysql#{{ mysql_mysqld_datadir }}#g' -e 's#/var/log/mysql#{{ mysql_logdir }}#g'
  register: sedchangeconf
  changed_when: sedchangeconf.stdout != ""
  with_items: 
    - /etc/apparmor.d/usr.sbin.mysqld
  args:
    warn: false
  when: mysql_mysqld_datadir != mysql_std_datadir and mysql_logdir != mysql_std_logdir

- name: Logrotate configuration
  template: 
    src: templates/logrotate.j2 
    dest: /etc/logrotate.d/mysql-server
    mode: 0644 
    owner: root 
    group: root
  
- name: Template my.cnf
  template: 
    src: my.cnf.j2
    dest: "/etc/mysql/my.cnf"
    owner: 0
    group: mysql 
    mode: 0640
  register: cnf

- stat: path="{{ mysql_logdir }}/mysql-error.log"
  register: err_log

- name: Create {{ mysql_logdir }}/mysql-error.log - needed to start MySQL
  file: 
    path: "{{ mysql_logdir }}/mysql-error.log"
    state: touch 
    owner: mysql
    group: mysql
    mode: 0640
  when: err_log.stat.exists == False

- name: Kill MYSQLd
  shell: killall "{{ item }}"
  with_items : [ mysqld, mysqld_safe ]
  failed_when: false
  changed_when: false
  when: cnf.changed

- name: Ensure MySQL is started and not enabled on boot
  service: name={{ mysql_svc }} state=started enabled=no
  changed_when: false